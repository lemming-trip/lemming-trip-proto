syntax = "proto3";
package lemmingtrip.oauth;

import "oauth/oauth_token.proto";


service OAuthTokenService {
  // === СОХРАНЕНИЕ ТОКЕНОВ ===
  // Сохранить токены, полученные от внешнего провайдера
  rpc StoreProviderTokens(StoreProviderTokensRequest) returns (StoreProviderTokensResponse);

  // === ПОЛУЧЕНИЕ ТОКЕНОВ ===
  // Получить активные токены пользователя для провайдера
  rpc GetUserProviderTokens(GetUserProviderTokensRequest) returns (GetUserProviderTokensResponse);

  // Получить конкретный токен по ID
  rpc GetToken(GetTokenRequest) returns (GetTokenResponse);

  // === ОБНОВЛЕНИЕ ТОКЕНОВ ===
  // Обновить access token используя refresh token
  rpc RefreshProviderToken(RefreshProviderTokenRequest) returns (RefreshProviderTokenResponse);

  // === УПРАВЛЕНИЕ ТОКЕНАМИ ===
  // Отозвать токены пользователя для провайдера
  rpc RevokeProviderTokens(RevokeProviderTokensRequest) returns (RevokeProviderTokensResponse);

  // Отозвать все токены пользователя
  rpc RevokeAllUserTokens(RevokeAllUserTokensRequest) returns (RevokeAllUserTokensResponse);

  // Валидация токена (проверка на истечение, отзыв)
  rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse);

  // === ПОЛУЧЕНИЕ ДАННЫХ ПОЛЬЗОВАТЕЛЯ ===
  // Получить информацию о пользователе от провайдера
  rpc GetProviderUserInfo(GetProviderUserInfoRequest) returns (GetProviderUserInfoResponse);

  // === УПРАВЛЕНИЕ КОНФИГУРАЦИЯМИ ПРОВАЙДЕРОВ ===
  // Создать/обновить конфигурацию провайдера
  rpc UpsertProviderConfig(UpsertProviderConfigRequest) returns (UpsertProviderConfigResponse);

  // Получить конфигурацию провайдера
  rpc GetProviderConfig(GetProviderConfigRequest) returns (GetProviderConfigResponse);

  // Список всех конфигураций провайдеров
  rpc ListProviderConfigs(ListProviderConfigsRequest) returns (ListProviderConfigsResponse);

  // === АУДИТ И МОНИТОРИНГ ===
  // Список токенов пользователя со всеми провайдерами
  rpc ListUserTokens(ListUserTokensRequest) returns (ListUserTokensResponse);

  // Статистика использования токенов
  rpc GetTokenUsageStats(GetTokenUsageStatsRequest) returns (GetTokenUsageStatsResponse);

  // === ОЧИСТКА ===
  // Очистить истекшие токены
  rpc CleanupExpiredTokens(CleanupExpiredTokensRequest) returns (CleanupExpiredTokensResponse);
}


