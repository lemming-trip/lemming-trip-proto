syntax = "proto3";

package lemmingtrip.models.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/lemming-trip/lemming-trip-proto/proto/lemmingtrip/models/v1;modelsv1";
option java_multiple_files = true;
option java_package = "com.lemmingtrip.models.v1";
option swift_prefix = "LTModelsV1";

// TripReply represents a reply to a trip.
message TripReply {
  string id = 1; // Unique identifier for the reply, typically a UUID.
  string trip_id = 2; // Identifier for the associated trip, linking to the Trip message.
  string user_id = 3; // Identifier for the user who made the reply, linking to the User message.
  string text = 4; // The text content of the reply, providing the user's input or feedback on the trip.
  repeated string images = 5; // List of image URLs associated with the reply, allowing users to share visual content related to the trip.
  bool is_read = 6; // Indicates whether the reply has been read, useful for tracking user engagement with trip replies.
  bool selected = 7; // Indicates whether the reply is selected, typically used to highlight important replies or for administrative purposes.
  google.protobuf.Timestamp created_at = 8; // Timestamp indicating when the reply was created, useful for sorting and displaying replies in chronological order.
  google.protobuf.Timestamp updated_at = 9; // Timestamp indicating when the reply was last updated, useful for tracking changes to the reply content.
}

message CreateReplyRequest {
  string trip_id = 1; // Identifier for the associated trip, linking to the Trip message.
  string user_id = 2; // Identifier for the user who made the reply, linking to the User message.
  string text = 3; // The text content of the reply, providing the user's input or feedback on the trip.
  repeated string images = 4; // List of image URLs associated with the reply, allowing users to share visual content related to the trip.
}

// CreateReplyResponse represents the response after creating a trip reply.
message CreateReplyResponse {
  TripReply reply = 1; // The created TripReply object, containing the details of the reply.
}

// UpdateReplyRequest represents the request to update a trip reply.
message UpdateReplyRequest {
  string id = 1; // Unique identifier for the reply to be updated.
  string text = 2; // The updated text content of the reply.
  repeated string images = 3; // Updated list of image URLs associated with the reply.
}

// UpdateReplyResponse represents the response after updating a trip reply.
message UpdateReplyResponse {
  TripReply reply = 1; // The updated TripReply object, containing the details of the reply after the update.
}

message GetReplyRequest {
  string id = 1;
}

// GetReplyResponse represents the response after retrieving a trip reply.
message GetReplyResponse {
  TripReply reply = 1; // The requested TripReply object, containing the details of the reply.
}

// DeleteReplyRequest represents the request to delete a trip reply.
message DeleteReplyRequest {
  string id = 1; // Unique identifier for the reply to be deleted.
}

// DeleteReplyResponse represents the response after deleting a trip reply.
message DeleteReplyResponse {
  bool success = 1; // Indicates whether the deletion was successful.
}

// ListRepliesRequest represents the request to list replies for a trip.
message ListRepliesRequest {
  string trip_id = 1; // Identifier for the trip for which replies are being requested.
  int32 take = 2; // Number of replies to return, used for pagination.
  int32 skip = 3; // Number of replies to skip, used for pagination.
}

// ListRepliesResponse represents the response after listing replies for a trip.
message ListRepliesResponse {
  repeated TripReply replies = 1; // List of TripReply objects, containing the details of the replies for the specified trip.
  int32 total = 2; // Total number of replies for the trip, useful for pagination and displaying the total count to users.
}
